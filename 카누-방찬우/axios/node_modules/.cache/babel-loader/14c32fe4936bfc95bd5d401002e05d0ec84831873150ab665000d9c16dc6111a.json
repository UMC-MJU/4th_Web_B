{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\db_son\\\\movie_app_2020\\\\src\\\\App.js\";\nimport React from \"react\";\n\n// props가 전달되는 과정\n// Food 컴포넌트에 설정한 props가 전달됨\n// props를 구조 분해 할당으로 출력\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Food(_ref) {\n  let {\n    fav\n  } = _ref;\n  // {fav} = props; {fav}\n  // props.fav\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"I LIKE \", fav]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n}\n\n//props 이름: fav\n//fav에 \"sushi\"라는 값을 담아 Food 컴포넌트에 보냄\n// props에 있는 데이터는 문자열인 경우를 제외하면 모두 중괄호로 값을 감싼다.\n_c = Food;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello World\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Food, {\n      fav: \"sushi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Food, {\n      fav: \"ramen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Food, {\n      fav: \"icecream\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Food\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Food","_ref","fav","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/db_son/movie_app_2020/src/App.js"],"sourcesContent":["import React from \"react\";\n\n\n\n// props가 전달되는 과정\n// Food 컴포넌트에 설정한 props가 전달됨\n// props를 구조 분해 할당으로 출력\nfunction Food({fav}) {\n  // {fav} = props; {fav}\n  // props.fav\n  return <h1>I LIKE {fav}</h1>\n}\n\n//props 이름: fav\n//fav에 \"sushi\"라는 값을 담아 Food 컴포넌트에 보냄\n// props에 있는 데이터는 문자열인 경우를 제외하면 모두 중괄호로 값을 감싼다.\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello World</h1>\n      {/*컴포넌트의 재사용*/}\n      <Food fav=\"sushi\"/>\n      <Food fav=\"ramen\"/>\n      <Food fav=\"icecream\"/>\n    </div>\n    \n  ); \n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAIzB;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,IAAIA,CAAAC,IAAA,EAAQ;EAAA,IAAP;IAACC;EAAG,CAAC,GAAAD,IAAA;EACjB;EACA;EACA,oBAAOF,OAAA;IAAAI,QAAA,GAAI,SAAO,EAACD,GAAG;EAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAM;AAC9B;;AAEA;AACA;AACA;AAAAC,EAAA,GARSR,IAAI;AAUb,SAASS,GAAGA,CAAA,EAAG;EACb,oBACEV,OAAA;IAAAI,QAAA,gBACEJ,OAAA;MAAAI,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAEpBR,OAAA,CAACC,IAAI;MAACE,GAAG,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACnBR,OAAA,CAACC,IAAI;MAACE,GAAG,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACnBR,OAAA,CAACC,IAAI;MAACE,GAAG,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAClB;AAGV;AAACG,GAAA,GAXQD,GAAG;AAaZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}