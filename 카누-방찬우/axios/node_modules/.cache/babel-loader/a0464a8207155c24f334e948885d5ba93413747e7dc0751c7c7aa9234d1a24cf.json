{"ast":null,"code":"import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// Movie에는 동적 데이터가 필요 없으므로 state도 필요 없음. 그래서 함수형 컴포넌트로 작성할 것\nfunction Movie(_ref){var id=_ref.id,title=_ref.title,year=_ref.year,summary=_ref.summary,poster=_ref.poster,genres=_ref.genres;return/*#__PURE__*/_jsxs(\"div\",{className:\"movie\",children:[/*#__PURE__*/_jsx(\"img\",{src:poster,alt:title,title:title}),/*#__PURE__*/_jsxs(\"div\",{className:\"movie__data\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"movie__title\",children:title}),/*#__PURE__*/_jsx(\"h5\",{className:\"movie__year\",children:year}),/*#__PURE__*/_jsx(\"ul\",{className:\"movie__genres\",children:genres.map(function(genre,index){return/*#__PURE__*/_jsx(\"li\",{className:\"movie__genre\",children:genre},index);})}),/*#__PURE__*/_jsxs(\"p\",{className:\"movie__summary\",children:[summary.slice(0,180),\"...\"]})]})]});}// Movie에 넘어와야 하는 영화 데이터를 정의하고 관리하기 위해 prop-types를 사용함\n//genres는 문자열 배열이며, 반드시 필요하다.\n/* genres Flow\r\ngenres data를 순회 하면서 하나 하나 가져와 li에 넣는다.\r\n그리고 이 작업을 마지막 element까지 수행하고 최종적으로 ul에 들어간다.\r\n*/export default Movie;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","Movie","_ref","id","title","year","summary","poster","genres","className","children","src","alt","map","genre","index","slice"],"sources":["C:/Users/db_son/movie_app_2020/src/Movie.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Movie에는 동적 데이터가 필요 없으므로 state도 필요 없음. 그래서 함수형 컴포넌트로 작성할 것\r\n\r\nfunction Movie({id,title,year,summary,poster, genres} ) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {genres.map((genre, index) => {\r\n                        return (\r\n                            <li key={index} className=\"movie__genre\">\r\n                                {genre}\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Movie에 넘어와야 하는 영화 데이터를 정의하고 관리하기 위해 prop-types를 사용함\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n//genres는 문자열 배열이며, 반드시 필요하다.\r\n/* genres Flow\r\ngenres data를 순회 하면서 하나 하나 가져와 li에 넣는다.\r\n그리고 이 작업을 마지막 element까지 수행하고 최종적으로 ul에 들어간다.\r\n*/\r\nexport default Movie;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAG1B;AAEA,QAAS,CAAAC,KAAKA,CAAAC,IAAA,CAA0C,IAAxC,CAAAC,EAAE,CAAAD,IAAA,CAAFC,EAAE,CAACC,KAAK,CAAAF,IAAA,CAALE,KAAK,CAACC,IAAI,CAAAH,IAAA,CAAJG,IAAI,CAACC,OAAO,CAAAJ,IAAA,CAAPI,OAAO,CAACC,MAAM,CAAAL,IAAA,CAANK,MAAM,CAAEC,MAAM,CAAAN,IAAA,CAANM,MAAM,CAChD,mBACIR,KAAA,QAAKS,SAAS,CAAC,OAAO,CAAAC,QAAA,eAClBZ,IAAA,QAAKa,GAAG,CAAEJ,MAAO,CAACK,GAAG,CAAER,KAAM,CAACA,KAAK,CAAEA,KAAM,EAAG,cAC9CJ,KAAA,QAAKS,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxBZ,IAAA,OAAIW,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAEN,KAAK,EAAM,cACzCN,IAAA,OAAIW,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAEL,IAAI,EAAM,cACvCP,IAAA,OAAIW,SAAS,CAAC,eAAe,CAAAC,QAAA,CACxBF,MAAM,CAACK,GAAG,CAAC,SAACC,KAAK,CAAEC,KAAK,CAAK,CAC1B,mBACIjB,IAAA,OAAgBW,SAAS,CAAC,cAAc,CAAAC,QAAA,CACnCI,KAAK,EADDC,KAAK,CAET,CAEb,CAAC,CAAC,EACD,cACLf,KAAA,MAAGS,SAAS,CAAC,gBAAgB,CAAAC,QAAA,EAAEJ,OAAO,CAACU,KAAK,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,KAAG,GAAI,GAC1D,GACJ,CAEd,CAEA;AASA;AACA;AACA;AACA;AACA,EACA,cAAe,CAAAf,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}